name: Test and Deploy üöÄ

on:
  workflow_dispatch:
  push:

jobs:
  test-back:
    name: Test Backend üß™
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./back
    env:
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_SSL: ${{ secrets.POSTGRES_SSL }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '19'
      - name: Install dependencies
        run: npm install
      - name: Run tests
        run: npm test
  
  build-back:
    name: Build and Push Backend Image üèó
    runs-on: ubuntu-latest
    needs: test-back
    if: github.ref_name == 'main'
    permissions:
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./back
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/y-back:latest

  test-front:
    name: Test Frontend üß™
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./front
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '19'
      - name: Install dependencies
        run: npm install
      - name: Lint
        run: npm run lint
      - name: Build
        run: npm run build
      - name: Run tests
        run: npm test
  
  build-front:
    name: Build and Push Frontend Image üèó
    runs-on: ubuntu-latest
    needs: test-front
    if: github.ref_name == 'main'
    permissions:
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./front
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/y-front:latest

  deploy:
    name: Deploy to Minikube üöÄ
    runs-on: self-hosted
    needs: [build-back, build-front]
    if: github.ref_name == 'main'
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Set up Minikube
        run: minikube start
      - name: Enable Ingress
        run: minikube addons enable ingress
      - name: Setup Ingress
        run: bash setup-ingress-tcp.sh
      - name: Create SSL Keys
        run: bash create-ssl-keys.sh
      - name: Wait for Ingress
        run: kubectl wait pods -n ingress-nginx -l app.kubernetes.io/component=controller --for condition=Ready --timeout=90s
      - name: Deploy
        run: kubectl apply -f k8s
      - name: Wait for Deployment
        run: |
          kubectl rollout status --watch --timeout=90s statefulset y-db
          kubectl wait --for=condition=available --timeout=90s deployment y-back y-front