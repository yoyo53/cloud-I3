name: Test and Deploy 🚀

on:
  workflow_dispatch:
  push:

jobs:
  test-back:
    name: Test Backend 🧪
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./back
    environment: test
    env:
      POSTGRES_HOST: ${{ vars.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ vars.POSTGRES_PORT }}
      POSTGRES_BASE_PATH: ${{ vars.POSTGRES_BASE_PATH }}
      POSTGRES_DB: ${{ vars.POSTGRES_DB }}
      POSTGRES_USER: ${{ vars.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '19'
      - name: Install dependencies
        run: npm install
      - name: Run tests
        run: npm test
  
  build-back:
    name: Build and Push Backend Image 🏗
    runs-on: ubuntu-latest
    needs: test-back
    if: github.ref_name == 'main'
    permissions:
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./back
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/y-back:latest

  test-front:
    name: Test Frontend 🧪
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./front
    environment: test
    env:
      API_URL: ${{ vars.BACK_URL }}
      BASE_PATH: ${{ vars.FRONT_BASE_PATH }}
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '19'
      - name: Install dependencies
        run: npm install
      - name: Lint
        run: npm run lint
      - name: Build
        run: npm run build
      - name: Run tests
        run: npm test
  
  build-front:
    name: Build and Push Frontend Image 🏗
    runs-on: ubuntu-latest
    needs: test-front
    if: github.ref_name == 'main'
    permissions:
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./front
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/y-front:latest

  deploy:
    name: Deploy to Minikube 🚀
    runs-on: self-hosted
    needs: [build-back, build-front]
    if: github.ref_name == 'main'
    environment: prod
    env:
      POSTGRES_HOST: ${{ vars.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ vars.POSTGRES_PORT }}
      POSTGRES_BASE_PATH: ${{ vars.POSTGRES_BASE_PATH }}
      POSTGRES_DB: ${{ vars.POSTGRES_DB }}
      POSTGRES_USER: ${{ vars.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_SSL: ${{ vars.POSTGRES_SSL }}
      BACK_HOST: ${{ vars.BACK_HOST }}
      BACK_PORT: ${{ vars.BACK_PORT }}
      BACK_BASE_PATH: ${{ vars.BACK_BASE_PATH }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      BACK_URL: ${{ vars.BACK_URL }}
      FRONT_HOST: ${{ vars.FRONT_HOST }}
      FRONT_PORT: ${{ vars.FRONT_PORT }}
      FRONT_BASE_PATH: ${{ vars.FRONT_BASE_PATH }}
      CA_CERT: ${{ secrets.CA_CERT }}
      CA_KEY: ${{ secrets.CA_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Set up Minikube
        run: minikube start
      - name: Enable Ingress
        run: minikube addons enable ingress
      - name: Encrypt Secrets for Kubernetes
        run: |
          echo "POSTGRES_PASSWORD=$(echo -n $POSTGRES_PASSWORD | base64)" >> $GITHUB_ENV
          echo "SECRET_KEY=$(echo -n $SECRET_KEY | base64)" >> $GITHUB_ENV
      - name: Create Kubernetes Manifests from Templates
        run: find k8s-templates -type f -name "*.yaml" -exec sh -c 'mkdir -p k8s/$(dirname {} | sed "s|k8s-templates/||") && envsubst < {} > k8s/$(echo {} | sed "s|k8s-templates/||")' \;
      - name: Setup Ingress
        run: bash setup-ingress-tcp.sh
      - name: Create SSL Keys
        run: bash create-ssl-keys.sh
      - name: Wait for Ingress
        run: kubectl wait pods -n ingress-nginx -l app.kubernetes.io/component=controller --for condition=Ready --timeout=90s
      - name: Deploy
        run: kubectl apply -f k8s/default
      - name: Wait for DB StatefulSet
        run: kubectl rollout status --watch --timeout=90s statefulset y-db
      - name: Wait for Deployments
        run: kubectl wait --for=condition=available --timeout=90s deployment y-back y-front